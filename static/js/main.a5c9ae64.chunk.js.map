{"version":3,"sources":["ButtonTable.tsx","Display.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ButtonTable","change","clear","solve","operate","eq_g","fxn_g","clear_g","numbut_fxn","disp","numbut_eq","numbut_clear","className","onClick","Display","text","App","useState","display","setDisplay","fxn","setfxn","val","setval","operator_solve","setOperator_solve","new_valb","setNew_valb","can_press_fxn","setCan_press_fxn","history","setHistory","can_press_eq","setCan_press_eq","length","update_history_same_line","concat","remove_dashes","slice","toString","pressed_equals","tempval","parseInt","hist","map","input","x","digit","operation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5c9ae64.chunk.js","sourcesContent":["import { equal } from 'assert';\r\nimport React, { useState } from 'react';\r\n\r\nexport const ButtonTable = ({change, clear, solve, operate, eq_g, fxn_g, clear_g, disp}: {\r\n        change: (text: string) => void;\r\n        clear: () => void;\r\n        solve: (pressed_equals: boolean) => void;\r\n        operate: (operation: string) => void;\r\n        eq_g: boolean;\r\n        fxn_g: boolean;\r\n        clear_g: boolean;\r\n        disp: string}\r\n     ): JSX.Element => {\r\n\r\n        let numbut_fxn: string = \"Fxnr\";\r\n        let numbut_eq: string = \"Fxnr\";\r\n        let numbut_clear: string = \"Fxnr\";\r\n        if (fxn_g){\r\n            numbut_fxn = \"Fxng\";\r\n        }\r\n        if (eq_g){\r\n            numbut_eq = \"Fxng\";\r\n        }\r\n        if (clear_g){\r\n            numbut_clear = \"Fxng\";\r\n        }\r\n\r\n\r\nreturn (\r\n    <table className=\"buttonTable\">\r\n        <tr>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(\"7\")}>7</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(\"8\")}>8</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(\"9\")}>9</button>\r\n            </td>\r\n            <td>\r\n                <button className={numbut_fxn} onClick={() => operate(\"/\")}>/</button>\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(\"4\")}>4</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(\"5\")}>5</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(\"6\")}>6</button>\r\n            </td>\r\n            <td>\r\n                <button className={numbut_fxn}  onClick={() => operate(\"*\")}>*</button>\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(\"1\")}>1</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(\"2\")}>2</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(\"3\")}>3</button>\r\n            </td>\r\n            <td>\r\n                <button className={numbut_fxn}  onClick={() => operate(\"-\")}>-</button>\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>\r\n                <button className={numbut_clear}  onClick={() => clear()}>C</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(\"0\")}>0</button>\r\n            </td>\r\n            <td>\r\n                <button className={numbut_eq} onClick={() => solve(true)}>=</button>\r\n            </td>\r\n            <td>\r\n                <button className={numbut_fxn}  onClick={() => operate(\"+\")}>+</button>\r\n            </td>\r\n        </tr>\r\n    </table>\r\n);\r\n}\r\n","import React from 'react';\r\n\r\nexport const Display = ({text}: {text: string}): JSX.Element => {\r\n    return <div className=\"display\">{text}</div>\r\n  }","import React, { useState } from 'react';\nimport { TupleType } from 'typescript';\nimport './App.css';\nimport { ButtonTable } from './ButtonTable';\nimport { Display } from './Display';\n\nfunction App(): JSX.Element {\n  const [display, setDisplay] = useState<string>(\"\");\n  const [fxn, setfxn] = useState<string>(\"\");\n  const [val, setval] = useState<number>(0);\n  const [operator_solve, setOperator_solve] = useState<boolean>(false);\n  let [new_valb, setNew_valb] = useState<boolean>(false);\n  let [can_press_fxn, setCan_press_fxn] = useState<boolean>(false);\n  const [history, setHistory] = useState<Array<string>>([]);\n  let [can_press_eq, setCan_press_eq] = useState<boolean>(false);\n\n  function clearHistory(){\n    clear();\n    setHistory([]);\n  }\n\n  function clear(){\n    /*Don't let them click this if no number is entered*/\n    if (display===\"\"){\n      return;\n    }\n    setCan_press_eq(false);\n    setCan_press_fxn(false);\n    setDisplay(\"\");\n    setval(0);\n    setfxn(\"\");\n    setOperator_solve(false);\n    setNew_valb(true);\n    if (history[history.length-1] == \"\"){\n      update_history_same_line(\"CLEAR\", false);\n    }\n    else{setHistory(history.concat([\"CLEAR\", \"\"]));\n    }\n  }\n\n  function update_history_same_line(text: string, remove_dashes: boolean){\n    if (remove_dashes){\n      setHistory(history.slice(0,history.length-2).concat(\n        history.slice(history.length-1, history.length).toString().concat(text)\n        )\n      );\n    }\n    else{\n      if (text == \"CLEAR\"){\n        setHistory(history.slice(0,history.length-1).concat(\n          history.slice(history.length-1, history.length).toString().concat(text),\n          [\"\"]\n          )\n        );\n      }\n      else{\n        setHistory(history.slice(0,history.length-1).concat(\n          history.slice(history.length-1, history.length).toString().concat(text)\n          )\n        );\n      }\n    }\n  }\n\n  function change(digit: string){\n    if(new_valb){\n      setNew_valb(false);\n      setDisplay(digit);\n    }\n    else{\n      setDisplay(display+digit);\n      \n    }\n    update_history_same_line(digit,false);\n    setCan_press_fxn(true);\n    setCan_press_eq(true);   \n  }\n\n  function operate(operation: string){\n    /*Don't let them click this if not allowed*/\n    if (!can_press_fxn){\n      return;\n    }\n    setfxn(operation);\n    setNew_valb(true);\n    if (operator_solve){\n      solve(false);\n    }\n    else{\n      setval(parseInt(display, 10));\n      setOperator_solve(true);\n    }\n    update_history_same_line(operation, (history[history.length-1] == \"\" && history[history.length-2] == \"---------------\"));\n    setCan_press_fxn(false);\n    setCan_press_eq(false);\n  }\n\n  function solve(pressed_equals: boolean){\n    /*Don't let them click this if not allowed*/\n    if (!can_press_fxn){\n      return;\n    }\n    if (pressed_equals && !can_press_eq){\n      return;\n    }\n    setCan_press_fxn(false);\n    let tempval = parseInt(display, 10);\n    if (fxn == \"+\"){\n      tempval = val + tempval;\n      setDisplay((tempval).toString());\n    }\n    if (fxn == \"-\"){\n      tempval = val - tempval;\n      setDisplay((tempval).toString());\n    }\n    if (fxn == \"*\"){\n      tempval = val * tempval;\n      setDisplay((tempval).toString());\n    }\n    if (fxn == \"/\"){\n      tempval = val / tempval;\n      setDisplay((tempval).toString());\n    }\n    setval(tempval);\n    setNew_valb(true);\n    if (pressed_equals){\n      setOperator_solve(false);\n      setHistory(history.concat([\"=\", tempval.toString(), \"---------------\"], \"\"))\n      setCan_press_fxn(true);\n      setCan_press_eq(false);\n    }\n  }\n\n  const hist = history.map((input, x) => {\n    return (\n        <li key = {x}>\n            <div>{input}</div>\n        </li>\n      );\n  });\n\n  return (\n    <div className=\"App\">\n      <Display text={display}></Display>\n      <ButtonTable change={change} clear={clear} solve={solve} operate={operate} eq_g = {can_press_eq} fxn_g = {can_press_fxn} clear_g={!(display == \"\")} disp={display}></ButtonTable>\n      <button className = \"clearHist\" onClick = {() => clearHistory()}>Clear History</button>\n      <ol className = \"sidebar\">{hist}</ol>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["ButtonTable.tsx","Display.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ButtonTable","change","solve","operate","disp","className","onClick","Display","text","App","useState","display","setDisplay","fxn","setfxn","val","setval","tempval","parseInt","toString","operation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LAGaA,EAAc,SAAC,GAKJ,IALKC,EAKN,EALMA,OAAQC,EAKd,EALcA,MAAOC,EAKrB,EALqBA,QAASC,EAK9B,EAL8BA,KAMnD,OACE,kCACI,+BACI,6BACI,wBAAQC,UAAU,SAASC,QAAS,kBAAML,EAAOG,EAAO,MAAxD,iBAEJ,6BACI,wBAAQC,UAAU,SAASC,QAAS,kBAAML,EAAOG,EAAO,MAAxD,iBAEJ,6BACI,wBAAQC,UAAU,SAASC,QAAS,kBAAML,EAAOG,EAAO,MAAxD,iBAEJ,6BACI,wBAAQC,UAAU,SAASC,QAAS,kBAAMH,EAAQ,MAAlD,oBAGR,+BACI,6BACI,wBAAQE,UAAU,SAASC,QAAS,kBAAML,EAAOG,EAAO,MAAxD,iBAEJ,6BACI,wBAAQC,UAAU,SAASC,QAAS,kBAAML,EAAOG,EAAO,MAAxD,iBAEJ,6BACI,wBAAQC,UAAU,SAASC,QAAS,kBAAML,EAAOG,EAAO,MAAxD,iBAEJ,6BACI,wBAAQC,UAAU,SAASC,QAAS,kBAAMH,EAAQ,MAAlD,oBAGR,+BACI,6BACI,wBAAQE,UAAU,SAASC,QAAS,kBAAML,EAAOG,EAAO,MAAxD,iBAEJ,6BACI,wBAAQC,UAAU,SAASC,QAAS,kBAAML,EAAOG,EAAO,MAAxD,iBAEJ,6BACI,wBAAQC,UAAU,SAASC,QAAS,kBAAML,EAAOG,EAAO,MAAxD,iBAEJ,6BACI,wBAAQC,UAAU,SAASC,QAAS,kBAAMH,EAAQ,MAAlD,oBAGR,+BACI,6BACI,wBAAQE,UAAU,SAASC,QAAS,kBAAML,EAAO,KAAjD,iBAEJ,6BACI,wBAAQI,UAAU,SAASC,QAAS,kBAAML,EAAOG,EAAO,MAAxD,iBAEJ,6BACI,wBAAQC,UAAU,SAASC,QAAS,kBAAMJ,KAA1C,iBAEJ,6BACI,wBAAQG,UAAU,SAASC,QAAS,kBAAMH,EAAQ,MAAlD,wBC9DHI,EAAU,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,KACrB,OAAO,8BAAMA,KCsCFC,MApCf,WACE,MAA8BC,mBAAiB,IAA/C,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAsBF,mBAAiB,IAAvC,mBAAOG,EAAP,KAAYC,EAAZ,KACA,EAAsBJ,mBAAiB,GAAvC,mBAAOK,EAAP,KAAYC,EAAZ,KAwBA,OACE,sBAAKX,UAAU,MAAf,UACE,cAAC,EAAD,CAASG,KAAMG,IACf,cAAC,EAAD,CAAaV,OAAQW,EAAYV,MAnBrC,WACE,IAAIe,EAAUC,SAASP,EAAS,IACrB,KAAPE,GACFD,GAAYG,EAAIE,GAASE,YAEhB,KAAPN,GACFD,GAAYG,EAAIE,GAASE,YAEhB,KAAPN,GACFD,GAAYG,EAAIE,GAASE,YAEhB,KAAPN,GACFD,GAAYG,EAAIE,GAASE,aAOwBhB,QAzBrD,SAAiBiB,GACfJ,EAAOE,SAASP,EAAS,KACzBG,EAAOM,GACPR,EAAW,KAsB0DR,KAAMO,QCrBhEU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.9d97ff32.chunk.js","sourcesContent":["import { equal } from 'assert';\r\nimport React, { useState } from 'react';\r\n\r\nexport const ButtonTable = ({change, solve, operate, disp}: {\r\n        change: (text: string) => void;\r\n        solve: () => void;\r\n        operate: (operation: string) => void;\r\n        disp: string}\r\n     ): JSX.Element => {\r\n  return (\r\n    <table>\r\n        <tr>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(disp + \"7\")}>7</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(disp + \"8\")}>8</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(disp + \"9\")}>9</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => operate(\"/\")}>/</button>\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(disp + \"4\")}>4</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(disp + \"5\")}>5</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(disp + \"6\")}>6</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => operate(\"X\")}>X</button>\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(disp + \"1\")}>1</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(disp + \"2\")}>2</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(disp + \"3\")}>3</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"fxnBut\" onClick={() => operate(\"-\")}>-</button>\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>\r\n                <button className=\"fxnBut\" onClick={() => change(\"\")}>C</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"numBut\" onClick={() => change(disp + \"0\")}>0</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"fxnBut\" onClick={() => solve()}>=</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"fxnBut\" onClick={() => operate(\"+\")}>+</button>\r\n            </td>\r\n        </tr>\r\n    </table>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport const Display = ({text}: {text: string}): JSX.Element => {\r\n    return <div>{text}</div>\r\n  }","import React, { useState } from 'react';\nimport './App.css';\nimport { ButtonTable } from './ButtonTable';\nimport { Display } from './Display';\n\nfunction App(): JSX.Element {\n  const [display, setDisplay] = useState<string>(\"\");\n  const [fxn, setfxn] = useState<string>(\"\");\n  const [val, setval] = useState<number>(0);\n\n  function operate(operation: string){\n    setval(parseInt(display, 10));\n    setfxn(operation);\n    setDisplay(\"\");\n    }\n\n  function solve(){\n    let tempval = parseInt(display, 10);\n    if (fxn == \"+\"){\n      setDisplay((val+tempval).toString());\n    }\n    if (fxn == \"-\"){\n      setDisplay((val-tempval).toString());\n    }\n    if (fxn == \"X\"){\n      setDisplay((val*tempval).toString());\n    }\n    if (fxn == \"/\"){\n      setDisplay((val/tempval).toString());\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Display text={display}></Display>\n      <ButtonTable change={setDisplay} solve = {solve} operate={operate} disp={display}></ButtonTable>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}